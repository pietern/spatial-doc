Introduction
============

A Spatial program describes a dataflow graph consisting of various kinds of nodes
connected to each other by data dependencies. Each node in a Spatial program corresponds to a architectural template.
Spatial is represented in-memory as a parameterized, hierarchical dataflow graph.

Templates in Spatial capture parallelism, locality, and access pattern information at multiple levels. This dramatically simplifies coarse-grained pipelining and
enables us to explicitly capture and represent a large space of designs which other tools cannot capture.
Every template is parameterized. A specific hardware design point is instantiated from a Spatial description by instantiating all the templates in the design with concrete
parameter values passed to the program. Spatial heavily uses metaprogramming, so these values are passed in as arguments to the Spatial program. The
generated design instance is represented internally as a graph that can be analyzed to provide estimates of metrics such as area and cycle count. The parameters
used to create the design instance can be automatically generated by a design space exploration tool.

(More to come)